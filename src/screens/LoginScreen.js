import React, { useEffect, useState } from 'react';
import { View, Button, StyleSheet, Alert } from 'react-native';
import * as WebBrowser from 'expo-web-browser';
import { useAuthRequest, exchangeCodeAsync } from 'expo-auth-session';
import * as Linking from 'expo-linking';

WebBrowser.maybeCompleteAuthSession();

const config = {
  clientId: 'RXXQyHK94ST6UCcbFTOu1Nl6sXYxXs9W3KPuZGVN',
  scopes: ['openid', 'profile', 'email', 'read', 'write'],
  redirectUri: 'exp://localhost:19000/--/oauthredirect',
  clientSecret:
    'NKaKzFkHbgShuj6ekEEBgS5wQBgASdtxXZAOBxmSKURT1Ta68cLp8wfa9YFYnZ9p4tTl3Q3joUyDpU4Hm4Mb6OwFgjtwuWENfEcA5Y6SwBKFIf4ZgWvhxbOTk7PfPcuv',
  extraParams: {
    usePKCE: true,
  },
};

const discovery = {
  authorizationEndpoint: 'http://10.0.2.2:8000/o/authorize/',
  tokenEndpoint: 'http://10.0.2.2:8000/o/token/',
  revocationEndpoint: 'http://10.0.2.2:8000/o/revoke_token/',
};

function handleUrl({ url }) {
  let { path, queryParams } = Linking.parse(url);
  console.log(
    `Linked to app with path: ${path} and data: ${JSON.stringify(queryParams)}`
  );
}

export default function LoginScreen() {
  const [request, response, promptAsync] = useAuthRequest(config, discovery);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  useEffect(() => {
    Linking.addEventListener('url', handleUrl);
    return () => {
      Linking.removeEventListener('url', handleUrl);
    };
  }, []);

  useEffect(() => {
    if (response?.type === 'success') {
      console.log('response', response);
      const { code, state } = response.params;
      const data = {
        grant_type: 'authorization_code',
        client_id: 'RXXQyHK94ST6UCcbFTOu1Nl6sXYxXs9W3KPuZGVN',
        client_secret:
          'NKaKzFkHbgShuj6ekEEBgS5wQBgASdtxXZAOBxmSKURT1Ta68cLp8wfa9YFYnZ9p4tTl3Q3joUyDpU4Hm4Mb6OwFgjtwuWENfEcA5Y6SwBKFIf4ZgWvhxbOTk7PfPcuv',
        code: code,
        redirect_uri: 'exp://localhost:19000/--/oauthredirect',
        state: state, // passing the state parameter
        code_verifier: request.codeVerifier, // code_verifier is automatically generated by useAuthRequest
      };

      fetch('http://10.0.2.2:8000/o/token/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: Object.keys(data)
          .map(
            (key) =>
              `${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`
          )
          .join('&'),
      })
        .then((response) => response.json())
        .then((data) => {
          console.log(data);
          // The response should include your access token, which you can then save and use for authenticated requests
        })
        .catch((error) => console.error(error));
      setIsAuthenticated(true);
    }
  }, [response, request]);

  const logout = () => {
    setIsAuthenticated(false);
  };

  return (
    <View style={styles.container}>
      {!isAuthenticated ? (
        <Button
          disabled={!request}
          title='Log In'
          onPress={() => {
            promptAsync();
          }}
        />
      ) : (
        <Button title='Log Out' onPress={logout} />
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    padding: 16,
  },
});
